{"version":3,"sources":["components/Loader/Loader.jsx","api/posts.js","components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","api/comments.js","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["Loader","className","BASE_URL","GetUserPosts","userId","fetch","then","response","json","user","data","filter","post","GetPostDetails","postId","res","PostsList","selectedPostId","setSelectedPostId","setLoading","useState","loadingPosts","setloadingPosts","posts","updatePosts","useEffect","map","key","id","title","type","onClick","NewCommentForm","setComments","name","setName","email","setEmail","body","setBody","onSubmit","event","preventDefault","url","action","method","JSON","stringify","addPostComment","comments","comment","placeholder","value","onChange","target","PostDetails","details","setDetails","hiddenComments","setHiddenComments","loading","setloading","detail","removeComment","commentId","removePostComment","length","App","selectedUser","setUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dc7793da.chunk.js","sourcesContent":["import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const GetUserPosts = userId => fetch(`${BASE_URL}/posts`)\n  .then(response => response.json())\n  .then(user => (userId === 0\n    ? user.data\n    : user.data.filter(post => post.userId === userId)));\n\nexport const GetPostDetails = postId => fetch(`${BASE_URL}/posts/${postId}`)\n  .then(response => response.json())\n  .then(res => res.data);\n","/* eslint-disable react/jsx-one-expression-per-line */\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Loader } from '../Loader/Loader';\nimport { GetUserPosts } from '../../api/posts';\nimport './PostsList.scss';\n\nexport const PostsList = ({\n  userId,\n  selectedPostId,\n  setSelectedPostId,\n  setLoading,\n}) => {\n  const [loadingPosts, setloadingPosts] = useState(true);\n  const [posts, updatePosts] = useState([]);\n\n  useEffect(() => {\n    setloadingPosts(true);\n    GetUserPosts(userId)\n      .then((user) => {\n        updatePosts(user);\n        setloadingPosts(false);\n      });\n  }, [userId]);\n\n  useEffect(() => {\n    GetUserPosts(userId)\n      .then(updatePosts);\n  }, [userId]);\n  // console.log(loading)\n\n  return (\n    <>\n      {loadingPosts\n        ? <Loader />\n        : (\n          <div className=\"PostsList\">\n            <h2>Posts:</h2>\n\n            <ul className=\"PostsList__list\">\n              {posts.map(post => (\n                <li\n                  className=\"PostsList__item\"\n                  key={post.id}\n                >\n                  <div>\n                    <b>\n                      `[User #${post.userId}]`\n                    </b>\n                    Post text:\n                    {' '}\n                    {post.title}\n\n                  </div>\n                  <button\n                    type=\"button\"\n                    className=\"PostsList__button button\"\n                    onClick={() => {\n                      selectedPostId === post.id\n                        ? setSelectedPostId(null)\n                        : setSelectedPostId(post.id);\n                    }\n                    }\n                  >\n                    {selectedPostId === post.id\n                      ? 'Close'\n                      : 'Open'\n                    }\n                  </button>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )\n\n      }\n    </>\n  );\n};\n\nPostsList.propTypes = {\n  userId: PropTypes.number.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n  setSelectedPostId: PropTypes.func.isRequired,\n  setLoading: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { addPostComment, getPostComments } from '../../api/comments';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ selectedPostId, setComments }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n\n    if (name && email && body) {\n      addPostComment(name, email, body, selectedPostId)\n        .then(() => getPostComments(selectedPostId))\n        .then(setComments);\n    }\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={onSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={event => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={event => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={event => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n  setComments: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const getPostComments = postId => fetch(`${BASE_URL}/comments`)\n  .then(response => response.json())\n  .then(comments => (postId === null\n    ? comments.data\n    : comments.data.filter(comment => comment.postId === postId)));\n\nexport const removePostComment = (commentId) => {\n  const url = `${BASE_URL}/comments/${commentId}`;\n  const action = { method: 'DELETE' };\n\n  return fetch(url, action);\n};\n\nexport const addPostComment = (body, email, name, postId) => {\n  const url = `${BASE_URL}/comments`;\n  const action = {\n    method: 'POST',\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  };\n\n  return fetch(url, action);\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Loader } from '../Loader/Loader';\nimport { removePostComment } from '../../api/comments';\nimport { GetPostDetails } from '../../api/posts';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [details, setDetails] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [hiddenComments, setHiddenComments] = useState(true);\n  const [loading, setloading] = useState(false);\n\n  useEffect(() => {\n    GetPostDetails(selectedPostId)\n      .then(setDetails);\n\n    setloading(true);\n    GetPostDetails(selectedPostId)\n      .then((detail) => {\n        setDetails(detail);\n        setloading(false);\n      });\n  }, [selectedPostId]);\n\n  const removeComment = (commentId) => {\n    setComments(comments.filter(comment => comment.id !== commentId));\n    removePostComment(commentId);\n  };\n\n  if (!details) {\n    return null;\n  }\n\n  return (\n    <>\n      {loading\n        ? <Loader />\n        : (\n          <div className=\"PostDetails\">\n            <h2>{details.title}</h2>\n\n            <section className=\"PostDetails__post\">\n              <p>{details.body}</p>\n            </section>\n\n            <section className=\"PostDetails__comments\">\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => setHiddenComments(!hiddenComments)}\n              >\n                {hiddenComments\n                  ? `Hide ${comments.length} comments`\n                  : `Show ${comments.length} comments`\n                }\n              </button>\n\n              {hiddenComments && (\n                <ul className=\"PostDetails__list\">\n                  {comments.map(comment => (\n                    <li\n                      className=\"PostDetails__list-item\"\n                      key={comment.id}\n                    >\n                      <button\n                        type=\"button\"\n                        className=\"PostDetails__remove-button button\"\n                        onClick={() => removeComment(comment.id)}\n                      >\n                        X\n                      </button>\n                      <p>{comment.body}</p>\n                    </li>\n                  ))}\n\n                  <li className=\"PostDetails__list-item\">\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                    >\n                      X\n                    </button>\n                  </li>\n                </ul>\n              )}\n            </section>\n\n            <section>\n              <div className=\"PostDetails__form-wrapper\">\n                <NewCommentForm\n                  selectedPostId={selectedPostId}\n                  setComments={setComments}\n                />\n              </div>\n            </section>\n          </div>\n        )\n      }\n    </>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App = () => {\n  const [selectedUser, setUser] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUser}\n            onChange={(event) => {\n              setUser(+event.target.value);\n            }}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            userId={selectedUser}\n            selectedPostId={selectedPostId}\n            setSelectedPostId={setSelectedPostId}\n          />\n        </div>\n        <div className=\"App__content\">\n          <PostDetails selectedPostId={selectedPostId} />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}